let globalData = [];
let blockTexts = {};
let typoThreshold = 0.25;

window.onload = () => {
    fetch('status.xlsx')
        .then(res => res.arrayBuffer())
        .then(buffer => {
            const workbook = XLSX.read(buffer, { type: 'array' });
            const sheet = workbook.Sheets["Sheet1"];
            const rows = XLSX.utils.sheet_to_json(sheet, { header: 1 }).slice(2);

            globalData = rows.map(row => ({
                task: row[1],     // Column B
                info: row[2],     // Column C
                status: row[3],   // Column D
                id: row[4],       // Column E
                block: row[5] || ""  // Column F
            })).filter(row => row.task && row.info && row.status && row.id);

            blockTexts = {};
            globalData.forEach(d => blockTexts[d.id] = d.block);



            function updateTaskSummary(data) {
                const total = data.length;

                let completed = 0, processing = 0, canStart = 0, cantStart = 0;

                data.forEach(d => {
                    const s = d.status.toLowerCase();
                    if (s.includes("completed")) completed++;
                    else if (s.includes("processing")) processing++;
                    else if (s.includes("can start")) canStart++;
                    else if (s.includes("can't start") || s.includes("cannot start")) cantStart++;
                });

                const percent = count => total === 0 ? 0 : Math.round((count / total) * 100);

                const summary = `Recognised tasks: ${total} (${completed} completed [${percent(completed)}%], ${processing} processing [${percent(processing)}%], ${canStart} can start [${percent(canStart)}%], ${cantStart} can't start [${percent(cantStart)}%])`;

                document.getElementById("totalTasks").innerText = summary;
            }





            const excludeCompleted = globalData.filter(d => !d.status.toLowerCase().includes("completed"));
            renderTiles(excludeCompleted);
            // document.getElementById("totalTasks").innerText = `Recognised tasks: ${globalData.length}`;
            updateTaskSummary(globalData);

        });

        document.getElementById("togglePane").addEventListener("click", () => {
        document.getElementById("detailPane").classList.toggle("active");
    });

    const searchBox = document.getElementById("searchBox");


    searchBox.addEventListener("keydown", e => {
        if (e.key === "Enter") handleSearch();
    });

    // Auto apply dark theme
    const isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    document.body.classList.toggle("dark", isDark);
};